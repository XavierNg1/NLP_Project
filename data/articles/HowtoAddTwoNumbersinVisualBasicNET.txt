 Programmers can do this either by defining the numbers as constants or variables. Variables are desired over constants for many reasons, mainly because they can be changed easily. For example, a variable can be changed by a user entering a number in a visual text box, whereas a constant cannot.


Defining items in Visual Basic requires a "dimension" command, abbreviated as "dim". To define your two numbers as integers, write the following code "above the fold" in the initial load sequence before functions are described: dim A as integer, dim B as integer. Here, A and B will be your two numbers.;
, After dimensioning the two numbers, you'll need to either enter values for them in code, or provide instructions for users to populate them during the program. A simple command like A = 5 is sufficient.
 Write this code into the same pre-functional prefix code: dim C as integer

, With the above example, your code is this: C = A + B

, You can include a visual text box to display the sum and create a command like: textbox1.text = val<c>

, Add the variable C back into other equations for more functionality within the program. There are many ways that programmers can take advantage of an added number to further influence outcomes within an executable program.


Run the program to catch bugs. Sometimes, small errors can produce bugs. Run the program and any available diagnostics to make sure the program works and values the sum correctly.
