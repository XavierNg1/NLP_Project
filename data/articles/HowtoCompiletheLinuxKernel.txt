;
, An example of this would be 3.4.4.1>>3.4.4.2

,,, Use these commands.


tar xjvf kernel (Here -j option is for bz2 compression)

,, There are 4 common ways to do this.


Make old configuration -- asks you questions on what the kernel should support one by one, very time consuming.
Make menuconfig -- creates a menu where you can browse options on what the kernel supports. Requires curses library, but that is likely already on your computer.
Make qconfig/xconfig/gconfig -- same as menuconfig, except that now the configuration menu is graphics based."qconfig" Requires the QT library.
Use configuration of current kernel. Run this from your kernel source folder "cp /boot/config-`uname -r` .config". This saves a lot of time, but you may want to change version number of the to be compiled kernel to avoid replacing your current kernel. "General setup" --> "Local version - append to kernel release". Example if the kernel version number is 3.13.0, you can example write there 3.13.0.RC1.
 Further, you may customize the options like adding support for your specific type of device/controller/driver like you may add support for NTFS file system from "Filesystem >> DOS/FAT/NT/ >> select NTFS file system support, thereby taking full advantage of custom kernel.
 If you want to use it then you may add further options, otherwise you may disable the option "kernel debugging", as it makes the kernel a lot heavier and and may be improper to use in the production environment.
 You can run needed commands in one line by separating them with double ampersands (&&) as written below. This may take a long time.


make && make modules_install && make install
You may want to use -j option with make. This allows to fork additional processes for compiling kernel, syntax would be "make -j 3". 3 here represents the number of processes to be created.
,,, Use the tool that came with your distro to configure your bootloader. Add a new entry for the new kernel.
