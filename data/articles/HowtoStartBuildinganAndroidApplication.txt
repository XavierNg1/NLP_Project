 JDK or the Java Development Kit is the first step to Android app development. The recent JRE ( or the Java Runtime Development ) must be downloaded as the older versions might cause serious technical issues with the latest JDK that the developer would want to use for his app. Install the JDK and keep in mind that “Development Tools”, “Source Code” and “Public JRE” occur in the custom install window. Click “Next”, read the licence agreement and there you go.;
, When using Windows system, navigate to System through Control Panel. Furthermore select the advanced settings and move on to “Environmental Variables”. Find out the variable known as “Path” and add the file path of the ‘bin’ directory of the newly installed Java. After doing this bit, carry out the commands “java -version” or “javac -version” to see successful execution of Java built.
 There are various IDE available that can be used but most frequently used is Eclipse. IDE aids the developer to debug, compile and add several functionalities to the code. The Eclipse usually comes bundled in a zip file which runs without getting installed. Some versions need to be installed, then default steps must be followed to proceed with the configuration of the setup. After getting Eclipse installed and configured, few basic tips to proceed working with the IDE must be known through the Help option and navigating onto the Workbench User Guide option.
 The Android Software Development Kit must be downloaded, installed and then all the packages that might be required must be installed.
 Google provides Android SDK plugin for Eclipse. Go to ‘Help’ and click on ‘Select New Software’. Click ‘Add’ button and then you will be directed to ‘Add Repository’ window that asks for the repository holding the ADT plugin. Fill in the name and the link to the repository. Click ‘OK’ and select the ‘Developer Tools’ option. Go ‘Next’ and install the plugin files. Move on to ‘Windows’ and ‘Preferences’ and select ‘Android’ section. The SDL location must be same as the SDK directory that was used before. Having successfully executed all the prerequisite steps, you are now the proud owner of Android Developer Tools plugin.
 No device is required to test your apps. Google offers an emulator for mobile OS along with ADT. Hence before developers start coding they must set up the “Android Virtual Device” for testing apps. Go on the ADT toolbar, select the phone icon and AVD manager window is opened. Select ‘New’, create a new virtual device and fill in required details.


Name : Put in a descriptive name if using for multiple device configurations.
Target : This is the Android version used by emulator.
SD Card : By default, there is 194 megabytes internal storage in the virtual device. But for additional storage, the space must be indicated here.
Skin : Use this option to control appearance and configuration of a specific device you want.
Hardware : Mention the specific virtual hardware you want for your app.
The virtual device is now ready. ‘Start’ it to commence booting.
 Having done all the setup and configurations, its time to begin with the project. Go to ‘File’, ‘New’, ‘Project’ and select ‘Android Application Project’. The most important options are the “Application Name” and “Minimum Required SDK”. Click ‘Next’ after having filled all options and mention a launcher that triggers the app. An ‘Activity’ will have to be created for the app in the next step. An activity is the view or action through which the user will interact with the logical divisions of the app functionality. Once the activities are decided, click “Finish”. Eclipse will further assemble all files and resources that the developer might need while developing the app.
 Many informative tutorials are available for helping the newbies learn about the programming part of Android App Development. The above mentioned steps are essential, rest depends on what the client requires from the app. Henceforth, with a certain mind map the development is carried out. Android development has increased by leaps and bounds over the years and with seamless integration of skills and expertise, the future holds too bright for Android Applications.

