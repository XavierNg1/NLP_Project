 Distributed application programming is considered by many to be one of the hardest to learn and requires diverse knowledge in computer and communication technologies.
 This step is optional. However, it is very useful in understanding network topologies.
, You need a good understanding of the Open Systems Interconnection (OSI) model, Ethernet, IP, TCP, UDP and HTTP before you start programming distributed applications.
, For Windows-based programming, that would be any script that works with Windows Scripting Host. For Linux-based programming, Bash scripts and Perl will be sufficient. JavaScript is strongly recommended for this in both platforms for the following reasons:


It is supported by almost any scripting host in any operating system (Windows Scripting Host supports JavaScript by default, most Linux distributions has a package for JavaScript scripting console support).
It is considered to be easier to learn by many developers.
It has an ALGOL derived syntax which familiarizes you with much more other programming languages when you need to choose a second programming language (C, C++, C#, Java and J# all have ALGOL derived syntax).
By learning JavaScript, you familiarize yourself with client-side scripting of web pages which is a bonus side-effect!

, Later, you can use more advanced programming techniques and paradigms according to your scripting language and what it supports. All scripting languages have some procedural programming aspects at some level.
 Learn what is necessary for doing that. Simple communications will suffice.
 Preferably, one that is a multi-paradigm language such as Python. Take a simple introduction to that second language. Java is considered by most programmers to be the language of choice for many reasons. However, C# is gaining momentum fast in this field. Java and C# are preferred for the following reasons:


They are object oriented programming languages which shields programmers in large teams from implementation details as they both supports components (units of code, pre-compiled, that perform a certain task and can be used in other programs).
They support event-driven programming, as well as OO and procedural programming at some level.
The framework that the language is built upon is distributed by nature (in the case of Java).
The availability of many ready-made packages that deal with networking, both as open-source code and framework built-in packages; this makes it easier for programmers to build upon the work of others.
 Pay less attention to user-interface elements such as outputting, window design and techniques, and user-interface elements.
 This can be done using books, online tutorials or academic courses. However, understanding the architecture of distributed applications and its concepts is necessary.
, It is recommended that you get at least an introduction to all of them. Most distributed application programmers do not stop at one or two programming languages, but learn at least one programming language on each operating system. That is because if you want your application to be "distributed", you should provide a version of it at least for each major operating system.


Common Object Request Broker Architecture (CORBA)
Simple Object Access Protocol (SOAP)
Asynchronous JavaScript and XML (AJAX)
Distributed Component Object Model (DCOM)
.NET Remoting
XML Web Services

