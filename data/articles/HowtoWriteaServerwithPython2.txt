 The two modules needed for this code are “socket” and “threading”. This can be done by typing on the first line “from socket import *” and on the next line “import threading”.
 This will handle matching 2 clients up with each other. Threads are processes that can be running while the main program runs. Type exactly like how the figure shows. This will set up the variables in the thread so that they can be called later.
 For clients to communicate directly you need to send to each the other’s information, which includes their IP address and which port they are using. To do this you must create a socket object which can be done with “variableName = socket(AF_NET, SOCK_DGRAM)”. This will create a socket object that uses the UDP protocol. Next Bind the socket to your IP address with a certain port number with “roomSocket.bind((‘ ‘, self.port))” The blank area stands for your own pc IP address within your local area network and self.port assigns the port number that is included when you call this thread. The last thing you have to do with this socket is send information through it. Since this is a UDP socket you simply must know the IP and port of the computer you are sending information to, the syntax for sending is “socketName.sendto(IP, port)"

, For this step you will need to define several variables, which includes a user list, port numbers, client count, clients for the thread, and the room ID. You will also need to create a socket so that your server can interact with the internet. This is done by creating a new socket object and binding it to your IP address with a certain port number. (The port number can be anything but it is usually something high to avoid having either another process using it or using reserved port numbers.)

, This will take in client address as well as start the thread created earlier. This includes waiting to receive data from the buffer and getting the client address and saving it to be used in the thread. The way to get information from your socket is to call by “socketName.recvfrom(1024)”, the number here is just the amount of bytes that gets read at a time. In this example we are storing it into a variable called userAddr, and once this happens you can save this address in the list that was created in step 4. The if statement will create a room thread if two people connect and will only create a room when two different connections happen.
 This should be done in a directory that is easy to get to so that it can be accessed easily for testing.

