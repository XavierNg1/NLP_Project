 Most desktop programmers write code for business solutions, so getting an idea about businesses, their organizational and financial structure will be a big time-saver.
 An introductory level course in digital circuits design and another in computer architecture is useful; however, some see it as being advanced for a starting point, so reading two or three tutorial articles (such as this one and this one) might suffice. Then you can go back to this step later, after you learn your first programming language.
 Don't be shy to learn such a language just because you're older than being called a "kid". An example of these programming languages can be Scratch. These programming languages can ease up the pain in learning your first programming language tremendously. However, this step is optional. It can also be done before the preceding step.
, No matter what language you choose later to be your language of choice, it will require procedural programming at some level. Also, procedural programming is reported by most programmers to be the easiest to use as a starting point to get the idea of programming in general.
, You can make use of common small exercises in programming languages books. For this, choose a tool for writing programs in the programming language you are writing in.
 Make sure you understand the following concepts well and that you can apply them with relative ease before going forward:


Inputting and outputting information to users of a program.
The logical flow and the execution flow of programs in procedural languages.
Declaring, assigning and comparing variables.
Branching programming constructs such as if..then..else and select/switch..case.
Looping constructs such as while..do, do..while/until, for..next.
Your programming language syntax for creating and calling procedures and functions.
Data types and manipulating them.
User defined data types (records/structs/units) and their use.
If your language supports overloading functions, understand it.
The memory accessing methods of your language of choice (pointers, peeking, etc.)
If your language supports operators overloading, understand it.
If your language supports delegates/function pointers, understand it

,


Object-oriented paradigm.
 It is recommended to learn one programming language of each paradigm, and most advanced programmers do, however, you usually start with one, work for a while applying your knowledge and practicing it, then learn the other later on, after you already had a real-life experience in programming. Try one of the following language areas:


Logic programming paradigm.
Functional programming paradigm.
 Evaluate the strengths and weaknesses of each one. Usually this is done by:


Taking simple samples of your early work in the first programming language and re-write it using the second programming language.
Creating a new project and try implementing it using both languages. Sometimes, depending on your choice of project and languages, you might not be able to implement the project in one of the languages!
Writing a cheat-sheet or summary-table comparisons between similar constructs in the two languages and features unique to each of the languages.
Try finding ways to mimic features that is unique to one of the two languages using the other language.
 Almost all programming languages have versions/libraries that support visual programming and others supporting console or console-like programming. This can be accomplished by:


Get an introduction to event-driven programming. Most visual programming relies in some level on events and events handling (using the programming language you choose).
Try as much desktop software as you can and understand what the software does. Most software development companies offer beta-testing versions of their products which you can use to test the software. Keep up-to-date on user interface advancements.
Read some articles or tutorials on graphical user interfaces.
 Try applying your programming expertise on problems you face in your day-to-day life. For example, write programs that rename files in mass, compares text files visually, copies the names of files in a directory to memory/text file, and things like that. Keep it simple at first.
 Complete this to the end, applying the techniques of visual programming you learned so far.
,, It will be very helpful for programmers wanting to write appealing user-interface elements.
 Game programming is considered, in most of its parts, desktop programming. If you intend to become a games programmer, you will need to learn more about game programming after you finish these steps. A graphics course is a must for game programmers and the second language of choice in the preceding steps should be a logic/functional programming language (preferably Prolog or Lisp).

