 A set of statements make a method, and this method can be invoked through other statement. When invoked (called) , all the statements that are a part of the method would be executed. For instance, look at this method: "public static void methodExample() {}". It currently has no code in it, but there are three keywords before the method name. There is public, static, and void.;
, There are three other words that can replace public. They are protected and private. If a method is protected, then only this class and subclasses (classes that use this as a basis to build off of) can call the method. If a method is private, then the method can only be called inside the class. The last keyword is really not even a word. This is if you had nothing in the place of public, protected, or private. This is called the default, or package-private. This means that only the classes in the same package can call the method.
 Static methods must be called using the class name: "ExampleClass.methodExample()". However, if the keyword static was not there, then the method can be invoked only through an object. For instance, if the class was called ExampleObject and it had a constructor (for making objects), then we could make a new object by typing ExampleObject obj = new ExampleObject();, and call the method with "obj.methodExample();".
 The word void means that the method doesn't return anything (it does not return anything when you run the method). If you do want a method to return something, then simply replace the word void with a data type (primitive or reference type) of the object (or primitive type) that you wish to return. Then just add return plus an object of that type somewhere toward the end of the method's code.
 For example, if a someMethod() returns an integer, then you can set an integer to what it returns with "int a = someMethod();"


, A method that requires a parameter of an integer would look like someMethod(int a) When using a method like this, you would write the method name, and then an integer in the parentheses: someMethod(5) or someMethod(n) if n is an integer.
 If the method someMethod required two parameters, int a and Object obj, it would look like "someMethod(int a, Object obj)". To use this new method, it would be called by the method name followed by an integer and an Object in parentheses: someMethod(4, thing) where thing is an Object.


