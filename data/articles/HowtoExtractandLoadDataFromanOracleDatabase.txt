 During this stage all the objects which are non data, such as PL/SQL, Sequences, Views, Table definitions, Object privileges etc. will be exported. There will be one such exp file per each schema exported. FastReader allows exporting of the schema definitions such as tables, constraints, sequences, triggers and generating scripts. The data from the large tables (fact tables and the large dimensions) should be exported using FastReader.;
, Native exp should be used with the TABLES parameter specifying only the small tables to be extracted. There will be one exp file per each schema exported.
 all the settings which are not exported using exp). If there is a need for a different tablespace/storage configuration then this should be taken into account in the latter stages.
 FastReader allows exporting of the schema definitions such as tables, constraints, sequences, triggers, etc. to be created on destination database

, These definitions are not exported during the schema export by exp.
 FastReader is utilizing the existing high-speed loaders for each supported database vendor (for instance, when data to be loaded into Oracle, then sqlldr will be utilized). FastReader creates automatically the control files for every supported target database vendor that reflect what tables/columns/data to be loaded and the scripts for actually executing the load. Before the load all the constraints and triggers on the large tables which can prevent “direct load” mode or hurt load performance should be disabled. Constraints on target database can be disabled / enabled also from FastReader GUI (Configurator). If materialized views are used with “refresh on commit” option, these should be disabled and refreshed completely at a later phase. For better control of the process the indexes maybe be dropped and recreated after the load. If the indexes remain then during the direct load, Oracle will build them using an efficient method similar in performance to creating an index on a full table. It is possible to load several tables and/or partitions simultaneously, by running several SQL loaders at once. This can improve load performance significantly on a multi-processor machine with good I/O.
,, It is also possible that materialized views can be moved with their data intact and then their status changed to TRUSTED or created as if from pre-built tables but this step is more complex in terms of correct execution and setup

,