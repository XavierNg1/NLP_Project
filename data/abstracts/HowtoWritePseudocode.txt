
Know what pseudocode is.
Understand why pseudocode is useful.
Remember that pseudocode is subjective and nonstandard.
Understand algorithms.
Remember the three basic constructs that control algorithm flow.
Consider an simple example program.
Use pseudocode iteratively: write it once, and then revise it later.
Use pseudocode to add features.
Write only one statement per line.
Capitalize the initial keyword of each main direction.
Write what you mean, not how to program it.
Leave nothing to the imagination.
Use standard programming structures.
Use blocks to structure steps.
Start by writing down the purpose of the process.
Write initial steps of pseudocode that set the stage for functions.
Write functional pseudocode.
Add comments, if necessary.
Read over the finished project for logic and syntax errors.
Review the pseudocode.
Save your pseudocode.
Trace the pseudocode and understand how it works.
Use coding elements that fit your programming language.
Implement the pseudocode.
Re-trace and compare the actual code to the pseudocode.